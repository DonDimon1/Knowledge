У хэш-таблиц, коллизия происходит, когда два разных входных значения имеют одно и то же хэш-значение, и, следовательно, претендуют на одно и то же место в хэш-таблице. Разрешение 
коллизий — важный аспект проектирования хэш-таблиц, поскольку эффективность хэш-таблицы сильно зависит от того, насколько эффективно решаются коллизии. Существует несколько основных 
методов решения коллизий в хэш-таблицах:

1. Открытая адресация (Open Addressing)
В этом методе все элементы хранятся непосредственно в хэш-таблице. Если происходит коллизия, используется один из следующих методов для поиска другого хэш-адреса:

Линейное пробирование (Linear Probing): при коллизии проверяется следующая ячейка таблицы. Если она занята, проверяется следующая за ней, и так далее, пока не будет найдена свободная
ячейка.

  int index = hash(key);
  while (table[index] is occupied) {
    index = (index + 1) % table_size;
  }

Квадратичное пробирование (Quadratic Probing): расстояние между проверяемыми ячейками увеличивается квадратично (1, 4, 9, ...), что помогает бороться с кластеризацией, характерной 
для линейного пробирования.

  int index = hash(key);
  int i = 1;
  while (table[index] is occupied) {
    index = (index + i * i) % table_size;
    i++;
  }

Двойное хэширование (Double Hashing): использует вторую хэш-функцию для создания другой последовательности ячеек для пробирования, что уменьшает кластеризацию и улучшает 
распределение.

  int index = hash1(key);
  int stepSize = hash2(key);
  while (table[index] is occupied) {
    index = (index + stepSize) % table_size;
  }

2. Цепочки (Chaining)
При этом методе каждая ячейка хэш-таблицы содержит указатель на список (или другую динамическую структуру данных), в котором хранятся все элементы с одинаковым хэшем. Если происходит
коллизия, элемент просто добавляется в список.


int index = hash(key);
table[index].append(new Element(key, value));

3. Совмещенное хэширование (Coalesced Hashing)
Это гибрид открытой адресации и метода цепочек. Коллизии разрешаются, помещая новый элемент в первую свободную ячейку таблицы, а затем, используя указатели, связывают его с 
предыдущим элементом, который имел ту же хэш-функцию.

4. Рехэширование (Rehashing)
Когда таблица становится слишком заполненной, выполняется рехэширование: элементы переносится в новую, более большую хэш-таблицу. Хотя это не метод разрешения коллизии 
непосредственно при вставке, это способ управления их частотой.

Выбор метода разрешения коллизий зависит от множества факторов, включая ожидаемое количество элементов, частоту операций вставки и удаления, а также требования к использованию 
памяти и производительности. Методы, такие как открытая адресация и цепочки, являются наиболее распространенными и имеют свои преимущества в различных сценариях использования.