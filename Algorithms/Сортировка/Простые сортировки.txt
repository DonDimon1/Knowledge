1) Пузырьковая сортировка (Bubble Sort)

Принцип: Повторно проходит по списку, сравнивая соседние элементы и меняя их местами, если они находятся в неправильном порядке.
Сложность: O(n^2) в худшем и среднем случаях.
Применение: Образовательные цели, так как алгоритм прост для понимания, но неэффективен для больших данных.

void bubbleSort(std::vector<int>& arr) {
    for (size_t i = 0; i < arr.size() - 1; ++i) {
        for (size_t j = 0; j < arr.size() - i - 1; ++j) {
            if (arr[j] > arr[j + 1]) {
                std::swap(arr[j], arr[j + 1]);
            }
        }
    }
}


2) Сортировка вставками (Insertion Sort)

Принцип: Постепенно строит отсортированный подмассив, вставляя элементы в правильное место.
Сложность: O(n^2) в худшем и среднем случаях.
Применение: Эффективен для небольших массивов или почти отсортированных данных.

void insertionSort(std::vector<int>& arr) {
    for (size_t i = 1; i < arr.size(); ++i) {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            --j;
        }
        arr[j + 1] = key;
    }
}


3) Сортировка выбором (Selection Sort)

Принцип: Находит минимальный элемент из несортированной части массива и меняет его местами с первым элементом этой части.
Сложность: O(n^2) в худшем и среднем случаях.
Применение: Используется в случаях, когда количество перестановок имеет значение.

void selectionSort(std::vector<int>& arr) {
    for (size_t i = 0; i < arr.size() - 1; ++i) {
        size_t minIndex = i;
        for (size_t j = i + 1; j < arr.size(); ++j) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;
            }
        }
        std::swap(arr[i], arr[minIndex]);
    }
}