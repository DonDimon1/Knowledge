Сортировка вставками (Insertion Sort)

Сортировка вставкой — это простой алгоритм сортировки, который работает путем итеративной вставки каждого элемента неотсортированного списка в его правильное положение в отсортированной части списка. Это похоже на сортировку игральных 
карт в руках. Вы разделяете карточки на две группы: отсортированные карточки и неотсортированные карточки. Затем вы выбираете карточку из неотсортированной группы и кладете ее в нужное место в отсортированной группе.

Он гораздо менее эффективен при работе с большими списками, чем более продвинутые алгоритмы, такие как быстрая сортировка, сортировка кучей или сортировка слиянием. Тем не менее, сортировка вставок имеет ряд преимуществ:
- Прост и удобен в реализации.
- Стабильный алгоритм сортировки.
- Эффективен для небольших списков и почти отсортированных списков.
- Компактный, так как это алгоритм на месте.
- Адцептивный. количество инверсий прямо пропорционально количеству свопов. Например, для отсортированного массива не происходит подкачки, и это занимает всего O(n) времени.

Недостатки:
- Неэффективно для больших списков.
- В большинстве случаев не так эффективен, как другие алгоритмы сортировки (например, сортировка слиянием, быстрая сортировка).

Сортировка вставками обычно используется в ситуациях, когда список небольшой или почти отсортированный.

Принцип:
1) Мы начнем со второго элемента массива, так как предполагается, что первый элемент будет отсортирован.
2) Сравните второй элемент с первым, если второй элемент меньше, то поменяйте их местами.
3) Перейдите к третьему элементу, сравните его с первыми двумя элементами и расположите на правильное место
4) Повторяйте до тех пор, пока не будет отсортирован весь массив.

Т.е, сортировки вставками всегда делят массив на 2 части — отсортированную и неотсортированную. Из неотсортированной части извлекается любой элемент. Поскольку другая часть массива отсортирована, то в ней достаточно быстро можно найти 
своё место для этого извлечённого элемента. Элемент вставляется куда нужно, в результате чего отсортированная часть массива увеличивается, а неотсортированная уменьшается. Всё. По такому принципу работают все сортировки вставками.

Реализация:

void insertionSort(std::vector<int>& arr) {
    for (size_t i = 1; i < arr.size(); ++i) {
        int key = arr[i];
        int j = i - 1;

	// Переместить элементы arr[0..i-1], которые больше ключа, на одну позицию вперед от их текущей позиции
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            --j;
        }
        arr[j + 1] = key;
    }
}

Вторая реализация:

void InsertionSort(std::vector<int>& arr) {
    for (int i = 1; i < arr.size(); ++i) {				// Просто идём по вектору начиная со второго элемента
        for (int j = i; j > 0 && arr[j] < arr[j - 1]; --j) {		// От текущего элемента идём назад, сравниваем все элементы на пути, меняем их местами, и продолжаем идти, пока у нас есть элементы больше текущего, или пока не 
            swap(arr[j-1],arr[j]);					// закончится вектор. Т.о. у нас каждый элемент встанет на своё место.
        }
    }
}


###
Временная сложность:

В лучшем случае: O(n), если список уже отсортирован, где n — количество элементов в списке.
Средний случай: O(n^2), Если список упорядочен случайным образом
Наихудший случай: O(n^2), Если список расположен в обратном порядке

Сложность пространства:

Вспомогательное пространство: O(1), Сортировка вставкой требует O(1) дополнительного пространства, что делает его алгоритмом сортировки с эффективным использованием пространства.


##############################
Варианты вставок в отсортированную часть

Самое слабое место в этом алгоритме — вставка элемента в отсортированную часть массива. На самом деле это непросто и на какие только ухищрения не приходится идти, чтобы выполнить этот шаг.

1) Сортировка простыми вставками (первая реализация)

Проходим по массиву слева направо и обрабатываем по очереди каждый элемент. Слева от очередного элемента наращиваем отсортированную часть массива, справа по мере процесса потихоньку испаряется неотсортированная. В отсортированной части 
массива ищется точка вставки для очередного элемента. Сам элемент отправляется в буфер, в результате чего в массиве появляется свободная ячейка — это позволяет сдвинуть элементы и освободить точку вставки.

На примере простых вставок показательно смотрится главное преимущество большинства (но не всех!) сортировок вставками, а именно — очень быстрая обработка почти упорядоченных массивов. При таком раскладе даже самая примитивная реализация
сортировки вставкам, скорее всего, обгонит супер-оптимизированный алгоритм какой-нибудь быстрой сортировки, в том числе и на больших массивах. Этому способствует сама основная идея этого класса — переброска элементов из 
неотсортированной части массива в отсортированную. При близком расположении близких по величине данных место вставки обычно находится близко к краю отсортированной части, что позволяет вставлять с наименьшими накладными расходами.
Нет ничего лучше для обработки почти упорядоченных массивов чем сортировки вставками.

2) Сортировка простыми вставками с бинарным поиском

Так как место для вставки ищется в отсортированной части массива, то идея использовать бинарный поиск напрашивается сама собой. Другое дело, что поиск места вставки не является критичным для временно́й сложности алгоритма (главный 
пожиратель ресурсов — этап самой вставки элемента в найденную позицию), поэтому данная оптимизация здесь мало что даёт. А в случае почти отсортированного массива бинарный поиск может работать даже медленнее, поскольку он начинает с 
середины отсортированного участка, который, скорее всего, будет находиться слишком далеко от точки вставки (а на обычный перебор от позиции элемента до точки вставки уйдёт меньше шагов, если данные в массиве в целом упорядочены).

Подход к реализации сортировки по двоичной вставке:
1) Переберите массив от второго элемента к последнему.
2) Сохраните текущий элемент A[i] в переменном ключе.
3) С помощью бинарного поиска найдите положение элемента, чуть больше A[i] в подмассиве от A[0] до A[i-1]. Скажем, этот элемент находится в индексе pos.
4) Сдвиньте все элементы с индекса pos на i-1 вправо.
5) A[pos] = ключ.

Как работает сортировка по двоичной вставке?
- В режиме сортировки по двоичной вставке мы делим одни и те же элементы на два подмассива - отфильтрованный и неотфильтрованный. Первый элемент тех же членов находится в организованном подмассиве, а все остальные элементы являются 
  незапланированными.
- Затем мы перебираем от второго элемента к последнему. При повторении i-го мы делаем текущий объект нашим «ключом». Этот ключ является функцией, которую мы должны добавить в наш существующий список ниже.
- Для этого мы сначала используем двоичный поиск по отсортированному подмассиву ниже, чтобы найти местоположение элемента, размер которого больше нашего ключа. Назовем эту позицию «pos». Затем мы сдвигаем вправо все элементы из pos в 1 
  и создаем Array[pos] = key.
- Можно отметить, что при каждом i-м умножении уже отсортирована левая часть массива до (i - 1).

int binarySearch(int a[], int item,
                int low, int high)
{
    if (high <= low)
        return (item > a[low]) ?
                (low + 1) : low;

    int mid = (low + high) / 2;

    if (item == a[mid])
        return mid + 1;

    if (item > a[mid])
        return binarySearch(a, item,
                            mid + 1, high);
    return binarySearch(a, item, low,
                        mid - 1);
}

// Function to sort an array a[] of size 'n'
void insertionSort(int a[], int n)
{
    int i, loc, j, k, selected;

    for (i = 1; i < n; ++i)
    {
        j = i - 1;
        selected = a[i];

        // find location where selected should be inserted
        loc = binarySearch(a, selected, 0, j);

        // Move all elements after location to create space
        while (j >= loc)
        {
            a[j + 1] = a[j];
            j--;
        }
        a[j + 1] = selected;
    }
}


Временная сложность: Алгоритм в целом по-прежнему имеет время выполнения в наихудшем случае, равное O(n2) из-за серии замен, необходимых для каждой вставки.

Другой подход: Ниже приведена итеративная реализация приведенного выше рекурсивного кода:

// iterative implementation
int binarySearch(int a[], int item, int low, int high)
{
    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (item == a[mid])
            return mid + 1;
        else if (item > a[mid])
            low = mid + 1;
        else
            high = mid - 1;
    }

    return low;
}

// Function to sort an array a[] of size 'n'
void insertionSort(int a[], int n)
{
    int i, loc, j, k, selected;

    for (i = 1; i < n; ++i) {
        j = i - 1;
        selected = a[i];

        // find location where selected should be inserted
        loc = binarySearch(a, selected, 0, j);

        // Move all elements after location to create space
        while (j >= loc) {
            a[j + 1] = a[j];
            j--;
        }
        a[j + 1] = selected;
    }
}


В защиту бинарного поиска отмечу, что он может сказать решающее слово в эффективности других сортировок вставками. Благодаря ему, в частности, на среднюю сложность по времени O(n log n) выходят такие алгоритмы как сортировка 
библиотекаря и пасьянсная сортировка. Но про них позже.


##############################
Парная сортировка простыми вставками

Эта сортировка входит в пакет JDK, является составной частью Dual-Pivot Quicksort. Используется для сортировки малых массивов (до 47 элементов) и сортировки небольших участков крупных массивов. В буфер отправляются не один, а сразу два 
рядом стоя́щих элемента. Сначала вставляется больший элемент из пары и сразу после него метод простой вставки применяется к меньшему элементу из пары. Что это даёт? Экономию для обработки меньшего элемента из пары. Для него поиск точки 
вставки и сама вставка осуществляются только на той отсортированной части массива, в которую не входит отсортированная область, задействованная для обработки большего элемента из пары. Это становится возможным, поскольку больший и 
меньший элементы обрабатываются сразу друг за другом в одном проходе внешнего цикла. На среднюю сложность по времени это не влияет (она так и остаётся равной O(n^2)), однако парные вставки работают чуть быстрее чем обычные.

void PairedInsertionSort(int* a, int left, int right) {
    for (int k = left; ++left <= right; k = ++left) {
        // Считываем пару элементов и заносим их в пару буферных переменных
        int a1 = a[k], a2 = a[left];

        // Переставляем местами, если нужно
        if (a1 < a2) {
            std::swap(a1, a2);
        }

        // Вставка большего из пары
        int i = k;
        while (a1 < a[--i]) {
            a[i + 2] = a[i];
        }
        a[i + 2] = a1;

        // Вставка меньшего из пары
        i = k;
        while (a2 < a[--i]) {
            a[i + 1] = a[i];
        }
        a[i + 1] = a2;
    }

    //Граничный случай, если в массиве нечётное количество элементов
    //Для последнего элемента применяем сортировку простыми вставками
    int last = a[right];
    int i = right;
    while (last < a[--i]) {
        a[i + 1] = a[i];
    }
    a[i + 1] = last;
}



##############################
Shell sort

Сортировка Шелла (англ. Shell sort) — алгоритм сортировки, являющийся усовершенствованным вариантом сортировки вставками. Идея метода Шелла состоит в сравнении элементов, стоящих не только рядом, но и на определённом расстоянии друг от 
друга. Аналогичный метод усовершенствования пузырьковой сортировки называется сортировка расчёской (Comb Sort).

В этом алгоритме очень остроумный подход в определении того, какую именно часть массива считать отсортированной. В просты вставках всё просто - от текущего элемента всё что слева - уже отсортировано, всё что справа - ещё не отсортировано. В отличие
от простых вставок, сортировка Шелла не пытается слева от элемента сразу формировать строго отсортированную часть массива, она создаёт слева от элемента ПОЧТИ отсортированную часть массива и делает это достаточно быстро. Сортировка Шелла 
закидывает текущий элемент в буффер и сравнивает его с левой частью массива. Если находит бОльшие элементы слева, то сдвигает их вправо освобождая место для вставки, но при этом берёт не всю левую часть, а только некоторую группу элементов из неё,
где элементы разнесены на некоторое расстояние. Такая система позволяет быстро вставлять элементы примерно в ту область массива, где они и должны находиться. С каждой итерацией основного цикла это расстояние постепенно уменьшается и когда оно 
становится равным 1, то сортировка Шелла в этот момент превращается в классическую сортировку простыми вставками, которой дали на обработку почти отсортированный массив. А почти отсортированный массив сортировка вставками сортирует очень
быстро.

При сортировки Шелла сначала сравниваются и сортируются между собой значения, стоящие один от другого на некотором расстоянии d. После это расстояние несколько уменьшается и алгоритм повторяется, а завершается сортировка Шелла
упорядочиванием элементов при d = 1, т.е. обычной сортировкой вставками. 

Алгоритм:
1) Выбор начального значения шага.
2) Выполнение сортировки вставками для элементов, находящихся на расстоянии шага друг от друга.
3) Постепенное уменьшение шага и повторения процесса, пока шаг не станет равным 1.
4) На последнем шаге агоритм выполняется как обычная сортировка вставками.

Невзирая на то, что сортировка Шелла во многих случаях медленее, чем быстрая сортировка, она имеет ряд преимуществ:
- отсутствие потребности в памяти под стек
- отсутствие деградации при неудачных наборах данных (быстрая сортировка легко деградирует до O(n^2), что хуже чем худшее гарантированное время сортировки Шелла).

Худшее время: O(n^2)
Лучшее время: O(n log^2 n)
Среднее время: зависит от выбранных шагов
Затраты памяти: O(1), так как сортировка выполняется на месте.

Код:

void ShellSort(int* arr, int size) {
    // Начинаем с большого разрыва (шага), затем сокрашаем разрыв. В данном случае делим расстояние d на 2.
    for (int gap = size / 2; gap > 0; gap /= 2) {
        // Сортировка вставки с зазором для этого размера зазора.
        // Первые элементы промежутка a [0.. gap-1] уже в порядке промежутков, продолжайте добавлять еще один элемент, пока весь массив не будет отсортирован по промежуткам
        for (int i = gap; i < size; i += 1) {
            // добавить [i] к элементам, которые были отсортированы
            int temp = arr[i];				// сохранить [i] в temp и сделать пустое место в положении i
            int j;
            
            for (j = i; j >= gap && arr[j - gap] > temp; j -= gap)	// сдвигать ранее отсортированные элементы вверх до правильного местоположение для [i]
                arr[j] = arr[j - gap];
            arr[j] = temp;					// поместить temp (оригинал a [i]) в правильное место
        }
    }
}


Выбор длины промежутков

Вопрос о том, какую последовательность пробелов использовать, является сложным, поскольку среднее время работы алгоритма зависит от длин промежутков - d, на которых будут находиться сортируемые элементы исходного массива ёмкостью N на каждом 
шаге алгоритма. Слишком мало пробелов замедляет алгоритм, а слишком много пробелов приводит к накладным надрывам. Список предложенных последовательностей d можно посмотреть на https://en.m.wikipedia.org/wiki/Shellsort. было замечено, что
Shellsort делает в среднем наименьшее количество сравнений, когда соотношения последовательных разрывов примерно равны 2,2 и 2,25, однако неизвестно почему это так. Рекомендуется использовать разрывы, которые имеют наибольшие общие делители.
Разрывы, которые являются нечётными числами, похоже хорошо работают на практике: сокращение 25% было отмечено за счёт избегания чётных разрывов.
 


##############################
Сортировка деревом

Сортировка деревом за счёт дополнительной памяти быстро решает вопрос с добавлением очередного элемента в отсортрованную часть массива. Причём в роли отсортированной части массива выступает бинарное дерево, которое формируется буквально на
лету при переборе элементов.

Основная загвоздка  сортировок вставками (а именно затраты на вставку элемента на своё место в отсортированной части массива) здесь решена оперативно, нам больше не нужно для освобождения точки вставки медленно передвигать караваны элементов 
как в предыдущих алгоритмах. Однако и в данном методе есть проблемы. Когда у нас бинарное дерево получается идеально сбалансированным, то вставка происходит быстро, поскольку в этом случае дерево имеет минимально возможную вложенность 
уровней. Но сбалансированная структура из рандомного массива получается редко, и дерево будет скорее всего неидеальное и несбалансированное, с перекосами. Чем больше несбалансированность, теме сильнее будет буксовать алгоритм по обходу дерева.
Проблему несбалоансированнх деревьев решает сортировка выворачиванием, которая использует особую разновидность бинарного дерева поиска = splay tree. Это дерево после каждой вставки в него автоматически балансируется. 


