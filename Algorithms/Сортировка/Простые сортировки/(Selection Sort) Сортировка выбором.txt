Сортировка выбором (Selection Sort)

Идея:
1) В неотсортированном подмассиве ищется локальный максимум (минимум).
2) Найденный максимум (минимум) меняется местами с последним (первым) элементом подмассива.
3) Если в массиве остались неотсортированне подмассивы - смотри пункт 1.

Просто и незатейлево - проходим по массиву в поисках максимального элемента. Найденный максимум меняем местами с последним элементом. Неотсортированная часть массива уменьшилась на один элемент. И так по кругу. Т.е. алгоритм 
находит минимальный элемент из несортированной части массива и меняет его местами с первым элементом этой части.

Сложность: O(n^2) в худшем и среднем и лучшем случаях, так как есть две вложенные петли: Один цикл для выбора элемента массива один за одним = O(n), и ещё один цикл для сравнения этого элемента со всеми другимим элементами массива =
O(n), поэтому общая сложность = O(n) * O(n) = O(n^2). Как правило Selection Sort (Сортировка выбором) работает хуже чем Insertion Sort (Сортировка вставками).

Преимущества:
- Требуется только дополнительное постоянное пространство памяти O(1).
- Алгоритм требует наименьшее количество свопов (менять местами элементы), а значит и наименьшее кол-во записей в память, по сравнению со многими другими стандартными алгоритмами. Только Cycle Sort (Циклическая сортировка) превосходит его с 
точки зрения записей памяти. Поэтому алгоритм может использоваться когда запись в память стоит дорого, или в других случаях, когда количество перестановок имеет значение.

Недостакти:
- Сложность O(n^2)
- Нестабильный

void selectionSort(std::vector<int>& arr) {
    for (size_t i = 0; i < arr.size() - 1; ++i) {
        size_t minIndex = i;			// Предположим, что текущая позиция содержит минимальный элемент
        for (size_t j = i + 1; j < arr.size(); ++j) {	// Выполните итерацию по несортированной части, чтобы найти фактический минимум
            if (arr[j] < arr[minIndex]) {
                minIndex = j;			// Обновите minIndex если нашли элмент с меньшим значением
            }
        }
        std::swap(arr[i], arr[minIndex]);		// Переместите минимальный элемент в правильную позицию
    }
}

Пирамидальная сортировка (Heap Sort) сильно улучшает базовый алгоритм, используя структуру данных "куча" для ускорения нахождения и удаления минимального элемента.


##############################
Отличие сортировок выбором от сортировок вставками.

Может показаться, что сортировки выбором и сортировки вставками - это суть одного и того же, общий класс алгоритмов, и там и там мы по очереди из неотсортированной части массива извлекаем элементы и перенаправляем их в отсортированную область.
Главное отличие: в  Insertion Sort  (сортировке вставками) мы извлекаем из неотсортированной части массива ЛЮБОЙ элемент и вставляем его на своё место в отсортированной части, а в Selection Sort (сортировка выбором) мы целенаправленно ищем
МАКСИМАЛЬНЫЙ (ИЛИ МИНИМАЛЬНЫЙ) элемент, которым дополняем отсортированную часть массива. Во вставках мы ищем куда вставить очередной элемент, а в выборе мы уже заранее знаем в какое место поставим, но при этом требуется найти элемент,
этому месту соответствующий. Это делает оба класса алгоритмов совершенно отличными друг от друга по своей сути и применяемым методам.


##############################
Разберём модицикации сортировки выбором

##############################
Двухсторонняя сортировка выбором

Похожая идея используется в Cocktail shaker sort (Шейкерная сортировка). Проходя по неотсортированной части массива, мы кроме максимума также попутно находим и минимум. Минимум ставим на первое место, максимум на последнее. Т.о. 
неотсортированная часть при каждой итерации уменьшается сразу на два элемента. На первый взгляд может показатся что это ускоряет алгоритм в 2 раза, но при этому в 2 раза увеличивается количество сравнений, а число свопов осталось неизменным. 
Двойной выбор лишь незначительно увеличивает скорость алгоритма.




