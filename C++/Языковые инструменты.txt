

______________________________________________________________________________________
Системы сборки кода

Когда проект содержит десятки и даже сотни файлов с исходным кодом, процесс его сборки надо автоматизировать. Здесь на помощь приходят системы сборки, которые автоматически 
запускают все нужные команды, чтобы скомпилировать и скомпоновать все файлы проекта. В итоге на выходе получается один исполняемый файл. Они позволяют избежать ручного 
выполнения рутинных задач, таких как компиляция, линковка и копирование файлов, а также управление зависимостями между компонентами программы. Благодаря автоматизации данных 
процессов, разработчики могут сосредоточиться на более творческой работе и повысить эффективность своей деятельности.

Системы сборки кода — это специальные программы, которые собирают и пересобирают код проекта в автоматическом режиме по заранее заданным правилам. Эти системы определяют 
зависимости между файлами с исходным кодом и выходными файлами (программами, библиотеками и конфигурационными файлами) и в нескольких параллельных процессах выполняют команды 
компиляции для всех изменившихся со времени последней сборки файлов, соблюдая зависимости. Вторая задача систем сборок — это поиск в операционной системе и подключение к проекту
библиотек и программ, которая реализуется наиболее удобными способами в зависимости от операционной системы.


В новых языках программирования (Rust, Go) параллельная сборка и поиск зависимостей уже встроены, но для существующих языков (C, C++, Fortran) это невозможно сделать, поэтому 
для них используют отдельные системы сборки. Про них и пойдет речь в этой лекции.

Система сборки является самым важным элементом любого проекта. Эта программа генерирует команды для сборки исходного кода, и чем быстрее эта система собирает код и чем больше 
рутинных операций автоматизирует, тем быстрее идет разработка, и тем проще настроить непрерывную интеграцию — автоматизированную сборку и тестирование вашей программы. В задачи 
системы сборки входит

поиск зависимостей (заголовочных файлов и библиотек),
генерация различных версий кода в зависимости от платформы, на которой происходит сборка,
генерация вспомогательных файлов,
генерация команд для компиляции всех исходный файлов.

Как правило, системы сборки поддерживают опции для включения или отключения различных компонент программы. Результатом работы системы сборки является директория, в которой 
находятся сгенерированные файлы, а также файл с дальнейшими командами для подчиненной (более низкоуровневой) системы сборки. К высокоуровневым системам относятся Autoconf, 
Cmake, Meson, к низкоуровневым — Make, Ninja.


В общем случае сборка проекта состоит из двух этапов:

1) Генерация файлов для системы сборки.
2) Непосредственно сборка.

Компиляции и сборка программы не менее важный процесс, чем написание самой программы.



______________________________________________________________________________________
Пакетный менеджер

Система управления пакетами (также иногда «менеджер пакетов» или «пакетный менеджер») — набор программного обеспечения, позволяющего управлять процессом установки, удаления, 
настройки и обновления различных компонентов программного обеспечения. Системы управления пакетами активно используются в различных дистрибутивах операционной системы Linux и 
других UNIX-подобных операционных системах.

Программное обеспечение представляется в виде особых пакетов, содержащих, помимо дистрибутива программного обеспечения, набор определённых метаданных, которые могут включать в 
себя полное имя пакета, номер версии, описание пакета, имя разработчика, контрольную сумму, отношения с другими пакетами. Метаданные сохраняются в системной базе данных пакетов.

В проектах разработчики не всегда используют собственный код. На самом деле они вообще редко используют собственный код, особенно при написании сложной логики. Существует 
множество замечательных готовых решений, над которыми трудились другие разработчики и всемирно-известные организации. И эти решения доступны всем. B ряде экосистем языков 
программирования созданы собственные менеджеры пакетов, обеспечивающие установку приложений на этих языках и необходимых библиотек.

Пакет (зависимость) — это один или несколько файлов, аккуратно объединенных вместе, которые можно загрузить из реестра пакетов. И таких пакетов в одном проекте может быть 
использовано очень много. Грубо говоря, пакет — это кусок кода, загруженный в интернет другими разработчиками. 

Соответственно, менеджер пакетов — это инструмент, который помогает нам устанавливать зависимости в проект и автоматизирует этот процесс.

























