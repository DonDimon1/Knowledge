Препроцессор это некая программа которая проводит некоторые манипуляции с кодом ещё до компиляции. Предварительная обработка.
#Слово - деректива препроцессора
_______________________________________________________________________________________________________________________________________________________________________________
#include (включить) - подключает в наш код какой нибудь файл. Перед компиляцией код из подключаемого файла перепишется на место этого include. И потом весь код подключаемый + 
наш компилируется. 

_____________________________________________________________________________________________________________
#define (определить) - заменяет указанные символы в коде на другие символы. Можно создавать макроопределения.

Пример:
#define PI 3.14
int main()
{
	cout << PI << endl; //В консоль выведет 3.14


}


||||||||||||||||||||||||||||
Создаём функцию с помощью макроса:
#define FOO(x,y) ((x)*(y))
int main()
{
	cout << FOO(5,6) << endl; //Выведет 30.
}
По сути важно понимать что обычная функция будет вызываться уже в скомпилированной программе и будет происходить передача параметров работа со стеком и пр. А вот такие макросы 
собираются на этапе подготовки к компиляции препроцессором. И фактически это аналогично тому если бы мы руками в коде сделали Ctrl+С Ctrl+V и просто бы меняли параметры в этих 
кусочках т.е. с точки зрения выполнения программы тут вообще нет никаких вызовов функций.


||||||||||||||||||||||||||||
Условная компиляция. Выбираем какой код компилировать а какой нет. (Для отладки).

#define DEBUG//Переменная для отладки. Если переменная оперделена код будет писаться полностью, если закоментируем её, то инфа для отладки выводиться не будет.

int main()
{
	setlocale(LC_ALL, "Russian");
#ifdef DEBUG
	cout <<	"Начало цикла. (для отладки)" << endl;
#endif // DEBUG
	for (int i = 0; i < 4; i++)
		cout << i << endl;
#ifdef DEBUG
	cout << "Конец цикла. (для отладки)" << endl;
#endif 
}

||||||||||||||||||||||||||||
Так же есть и else
#define DEBUG

int main()
{
	setlocale(LC_ALL, "Russian");
#ifdef DEBUG // Если дебаг определён то будет работать эта часть кода
	cout <<	"DEBUG определён" << endl;
#else	// Если нет, то только эта.
	cout << "DEBUG Не определён" << endl;
#endif 
}

||||||||||||||||||||||||||||
Тоже самое только в другую сторону (инверсия).
#define DEBUG

int main()
{
	setlocale(LC_ALL, "Russian");
#ifndef DEBUG // Если дебаг определён то эта часть кода работать не будет (ifndef и ifdef это противоположности)
	cout <<	"1" << endl;
#else
	cout << "2" << endl;
#endif 
}

||||||||||||||||||||||||||||
Деректива со значением
#define DEBUG 5 // DEBUG = 5

int main()
{
	setlocale(LC_ALL, "Russian");
#if DEBUG > 4 //Если DEBUG больше 4 то выведется эта часть кода
	cout <<	"1" << endl;
#elif DEBUG == 2 //Если DEBUG равно 2 то выведется эта часть кода
	cout << "2" << endl;
#else	// Если нет, то выведется эта.
	cout << "2" << endl;
#endif 
}

||||||||||||||||||||||||||||
#pragma once - деректива препроцессора для решения задачи повтороного включения.




























