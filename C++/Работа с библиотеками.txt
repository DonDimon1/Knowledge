При работе с C++ вам может потребоваться использовать внешние библиотеки для решения различных задач. Библиотеки — это предварительно скомпилированные фрагменты кода, которые можно 
повторно использовать в вашей программе для выполнения определенной задачи или предоставления определенной функциональности. В C++ библиотеки могут быть либо статическими (.lib), 
либо динамическими библиотеками (.dll в Windows, .so в Unix/Linux).


1. Статические библиотеки

Статические библиотеки включаются в вашу программу во время компиляции. Они связаны с вашим кодом, создавая исполняемый файл большего размера, но во время выполнения ему не требуются 
никакие внешние файлы.

Чтобы создать статическую библиотеку, вам необходимо скомпилировать исходные файлы в объектные файлы, а затем объединить их в архив. Вы можете использовать следующие команды:

g++ -c sourcefile.cpp -o objectfile.o
ar rcs libmystaticlibrary.a objectfile.o
Чтобы использовать статическую библиотеку, вам необходимо включить файлы заголовков в исходный код, а затем связать библиотеку в процессе компиляции:

g++ main.cpp -o myprogram -L/path/to/your/library/ -lmystaticlibrary
Замените /path/to/your/library/на путь, по которому libmystaticlibrary.aнаходится ваш файл.


2. Динамические библиотеки

Динамические библиотеки загружаются во время выполнения, а это означает, что ваш исполняемый файл содержит только ссылки на эти библиотеки. Библиотеки должны быть доступны в системе, 
где работает ваша программа.

Чтобы создать динамическую библиотеку, вам необходимо скомпилировать исходные файлы в объектные файлы, а затем создать общую библиотеку:

g++ -c -fPIC sourcefile.cpp -o objectfile.o
g++ -shared -o libmydynamiclibrary.so objectfile.o
Чтобы использовать динамическую библиотеку, включите заголовочные файлы библиотеки в исходный код, а затем свяжите библиотеку в процессе компиляции:

g++ main.cpp -o myprogram -L/path/to/your/library/ -lmydynamiclibrary
Замените /path/to/your/library/на путь, по которому libmydynamiclibrary.so находится ваш файл.

ПРИМЕЧАНИЕ. При использовании динамических библиотек убедитесь, что библиотека находится в системном пути поиска общих библиотек. Возможно, вам придется обновить LD_LIBRARY_PATH 
переменную среды в системах Unix/Linux или PATHпеременную в Windows.

В заключение, использование библиотек в C++ предполагает создание или получение библиотеки (статической или динамической), включение заголовочных файлов библиотеки в исходный код и 
связывание библиотеки в процессе компиляции. Помните о различиях между статическими и динамическими библиотеками и выбирайте правильный подход, соответствующий вашим потребностям.


______________________________________________________________________________________
Включение в C++
В программировании на C++ включение означает включение в вашу программу внешних библиотек, файлов заголовков или других файлов кода. Этот процесс позволяет разработчикам получать 
доступ к предварительно созданным функциям, классам и объявлениям переменных, которые можно использовать в их собственном коде. В C++ существует два типа включения:


Включение заголовка

Включение заголовка предполагает включение файлов заголовков с помощью директивы препроцессора #include. Файлы заголовков обычно используются для предоставления прототипов функций, объявлений классов и определений констант, которые могут использоваться в нескольких исходных файлах. Есть два способа включить файлы заголовков в вашу программу:

Угловые скобки <>: используются для включения заголовков стандартных библиотек, таких как iostream, vectorили algorithm.
Пример:

#include <iostream>
#include <vector>

Двойные кавычки "": используются для включения пользовательских заголовков или заголовков, предоставленных сторонними библиотеками.
Пример:

#include "myHeader.h"
#include "thirdPartyLibrary.h"


Включение источника
Включение источника означает включение содержимого исходного файла непосредственно в другой исходный файл. Этот подход обычно не рекомендуется, поскольку он может привести к 
множественным определениям и увеличению времени компиляции, но иногда он может быть полезен для определенных задач (например, шаблонов или простых небольших программ). Чтобы 
включить исходный файл, вы можете использовать #includeдирективу с двойными кавычками, как и в случае с файлами заголовков:

Пример:

#include "mySourceFile.cpp"
Помните, что использование включения исходного кода для крупных проектов или в ситуациях, когда в этом нет необходимости, может привести к неожиданным проблемам, и его следует избегать.

