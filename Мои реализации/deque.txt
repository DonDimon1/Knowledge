#include <iostream>
#include <memory>		// Для std::allocator
#include <type_traits>	// Для std::conditional
#include <cmath>

template <typename T>
class deque {
private:
	static const size_t BUCKET_SIZE = 3;		// Размер одного бакета (3) для простоты отладки
	T** map_;									// Таблица указателей на бакеты
	size_t mapSize_;							// Её размер
	size_t begin_bucket_;						// Индекс первого бакета
	size_t begin_offset_;						// Смещение в первом бакете. 
	size_t end_bucket_;							// Индекс последнего бакета
	size_t end_offset_;							// Смещение в последнем бакете
	size_t min_allocated_index_ = begin_bucket_;// Индексы выделенной памяти. Для освобождении памяти ориентируюсь на них
	size_t max_allocated_index_ = end_bucket_;
	std::allocator<T> bucket_alloc_;
	std::allocator<T*> map_alloc_;

	template <bool IsConst>						// Класс итератора
	class base_iterator {
		// Позволяем base_iterator<false> и base_iterator<true> получать приватные поля друг друга
		template <bool OtherIsConst>
		friend class base_iterator;

		T** map_;
		size_t bucketIndex_;
		size_t bucketOffset_;

	public:
		using pointer_type = std::conditional_t< IsConst, const T*, T*>;	// Тип указателя 
		using reference_type = std::conditional_t< IsConst, const T&, T&>;	// Тип ссылки 

		base_iterator() : map_(nullptr), bucketIndex_(0), bucketOffset_(0) {}
		base_iterator(T** map, size_t bucketIndex, size_t bucketOffset) :
			map_(map), bucketIndex_(bucketIndex), bucketOffset_(bucketOffset) {
		}

		base_iterator(const base_iterator& other) :
			map_(other.map_),
			bucketIndex_(other.bucketIndex_),
			bucketOffset_(other.bucketOffset_) {
		}

		template <bool OtherIsConst, typename = std::enable_if_t< IsConst || (!IsConst && !OtherIsConst) >>
		base_iterator(const base_iterator<OtherIsConst>& other) :
			map_(other.map_),
			bucketIndex_(other.bucketIndex_),
			bucketOffset_(other.bucketOffset_) {
		}

		// Избегаем запрета присваивания неконстантному итератору константного итератора
		template <bool OtherIsConst, typename = std::enable_if_t<IsConst || (!IsConst && !OtherIsConst) >>
		base_iterator& operator=(const base_iterator<OtherIsConst>& other) {
			if (this != &other) {								// Избегаем самоприсваивание
				map_ = other.map_;
				bucketIndex_ = other.bucketIndex_;
				bucketOffset_ = other.bucketOffset_;
			}
			return *this;
		}

		reference_type operator*() {
			return map_[bucketIndex_][bucketOffset_];
		}

		pointer_type operator->() {
			return &(map_[bucketIndex_][bucketOffset_]);
		}

		base_iterator& operator++() {
			++bucketOffset_;

			if (bucketOffset_ == BUCKET_SIZE) {
				bucketOffset_ = 0;
				++bucketIndex_;
			}

			//TODO:: Возможно нужна проверка за выход из end()
			return *this;
		}

		base_iterator operator++(int) {
			base_iterator temp = *this;

			++bucketOffset_;

			if (bucketOffset_ == BUCKET_SIZE) {
				bucketOffset_ = 0;
				++bucketIndex_;
			}
			//TODO:: Возможно нужна проверка за выход из end()
			return temp;
		}

		base_iterator& operator--() {
			if (bucketOffset_ == 0) {
				bucketOffset_ = BUCKET_SIZE;
				--bucketIndex_;
			}

			--bucketOffset_;
			//TODO:: Возможно нужна проверка за выход из begin()
			return *this;
		}

		base_iterator operator--(int) {
			base_iterator temp = *this;

			if (bucketOffset_ == 0) {
				bucketOffset_ = BUCKET_SIZE;
				--bucketIndex_;
			}

			--bucketOffset_;
			//TODO:: Возможно нужна проверка за выход из begin()
			return temp;
		}

		base_iterator& operator+=(std::ptrdiff_t num) {
			// bucketIndex_ * BUCKET_SIZE + bucketOffset_ это индекс текущего элемента
			// А если + num, то это глобальный индекс нового элемента
			std::ptrdiff_t globalIndex = bucketIndex_ * BUCKET_SIZE + bucketOffset_ + num;

			// Определяем новый бакет и смещение внутри бакета
			bucketIndex_ = globalIndex / BUCKET_SIZE;
			bucketOffset_ = globalIndex % BUCKET_SIZE;

			// Возвращаем изменённый итератор
			return *this;
		}

		base_iterator operator+(std::ptrdiff_t num) const {
			base_iterator temp = *this;
			temp += num;
			// Возвращаем новый итератор, не изменяя текущий
			return temp;
		}

		// Сдвиг итератора на num позиций назад
		base_iterator& operator-=(std::ptrdiff_t num) {
			return *this += -num;
		}

		// Вычисление разницы между двумя итераторами)
		std::ptrdiff_t operator-(const base_iterator& other) const {
			std::ptrdiff_t globalIndexThis = bucketIndex_ * BUCKET_SIZE + bucketOffset_;
			std::ptrdiff_t globalIndexOther = other.bucketIndex_ * BUCKET_SIZE + other.bucketOffset_;

			return globalIndexThis - globalIndexOther;  // Разница в глобальных индексах
		}

		base_iterator& operator-(long long num) {
			size_t index = bucketOffset_ - num;							// Индекс элемента в таблице
			size_t bucketIndex = index / BUCKET_SIZE;					// Индекс бакета
			size_t itemIndex = index - bucketIndex * BUCKET_SIZE;		// Значение элемента в бакете
		}


		bool operator==(const base_iterator& other) const {
			return (other.map_ == this->map_ &&
				other.bucketIndex_ == this->bucketIndex_ &&
				other.bucketOffset_ == this->bucketOffset_);
		}

		bool operator!=(const base_iterator& other) const {
			return !(*this == other);
		}
	};

	void MapRealocation(size_t newMapSize = 0) {
		// Если это создание новой таблицы
		if (mapSize_ == 0) {
			if (newMapSize == 0) {					// Значене по умолчанию
				mapSize_ = 1;
				begin_bucket_ = end_bucket_ = 0;
			}
			else {									// Кастомное значение
				mapSize_ = newMapSize;
				begin_bucket_ = end_bucket_ = newMapSize / 2;
				min_allocated_index_ = max_allocated_index_ = begin_bucket_;
			}

			// Выделяем память под таблицу и первый бакет
			T* bucket = nullptr;

			try {
				map_ = map_alloc_.allocate(mapSize_);
				bucket = bucket_alloc_.allocate(BUCKET_SIZE);
				map_alloc_.construct(map_ + begin_bucket_, bucket);
			}
			catch (...) {
				// При исключении проверяем какие объекты аллоцировались и деалацируем их
				if (map_)
					map_alloc_.deallocate(map_, mapSize_);
				if (bucket)
					bucket_alloc_.deallocate(bucket, BUCKET_SIZE);
				throw;
			}

			return;	// Конец создания новой таблицы
		}

		throw std::bad_alloc();
		// Если это реалокация уже существующей таблицы
		if (newMapSize == 0)										// Значение по умолчанию			
			newMapSize = mapSize_ * 2 + 1;							// Новый размер таблицы

		size_t numBuckets = end_bucket_ - begin_bucket_ + 1;		// Кол-во бакетов
		// Расчитываем новые позицию бакетов в таблице для равномерного распределения
		size_t new_begin_bucket = (newMapSize - numBuckets) / 2;	// Новый индекс первого бакета
		size_t new_end_bucket = new_begin_bucket + numBuckets;		// Новый индекс последнего бакета. 


		// Выделяем память для новой таблицы
		T** newMap = nullptr;
		size_t bucketIndex = 0;

		try {
			newMap = map_alloc_.allocate(newMapSize);

			for (; bucketIndex < numBuckets; ++bucketIndex) {
				T* oldBucket = map_[begin_bucket_ + bucketIndex];					// Старый бакет		

				map_alloc_.construct(newMap + new_begin_bucket + bucketIndex, 
									 std::move_if_noexcept(oldBucket));				// Перемещаем старый бакет 
			}
		} 
		catch (const std::bad_alloc& e) {
			std::cerr << "Ошибка аллокатора таблицы map_: " << e.what() << std::endl;
			throw;
		}
		catch (const std::exception& e) {
			std::cerr << "Ошибка конструктора при перемещении бакетов в методе MapRealocation: " << e.what() << std::endl;
			// Возвращаем бакеты в старую таблицу
			
			for (size_t i = 0; i < bucketIndex; ++i) {
				T* newBucket = newMap[new_begin_bucket + i];
				// TODO: исключение возможно и при возвращении бакетов в старую таблицу
				map_alloc_.construct(map_ + begin_bucket_ + i, std::move_if_noexcept(newBucket)); 
			}

			map_alloc_.deallocate(newMap, newMapSize);
			throw;
		}
		

		// Очищаем неиспользуемую память
		// Память например между 0 и min_allocated_index неалоцирована соответсвтенно деалоцировать её не нужно.
		// Деалоцировать промежуток памяти между min_allocated_index и begin_bucket_
		for (size_t i = min_allocated_index_; i < begin_bucket_; ++i)
			bucket_alloc_.deallocate(map_[i], BUCKET_SIZE);
		// Деалоцировать промежуток памяти между end_bucket_ и max_allocated_index_
		for (size_t i = end_bucket_; i < max_allocated_index_; ++i)
			bucket_alloc_.deallocate(map_[i], BUCKET_SIZE);

		map_alloc_.deallocate(map_, mapSize_);								// Очищаем память старой таблицы
		map_ = newMap;														// Сохраняем указатель на новую таблицу
		mapSize_ = newMapSize;												// Сохраняем новый размер таблицы
		min_allocated_index_ = begin_bucket_ = new_begin_bucket;			// Новые индексы
		max_allocated_index_ = end_bucket_ = new_end_bucket - 1;
	}

	void Shrink_map(size_t numEmptyBucket) {
		try {
			size_t threshold = mapSize_ / 4;				// Порог, при котором запускается освобождение памяти
			if (numEmptyBucket >= threshold)				// Если порог превышен
				MapRealocation(mapSize_ - threshold);		// то переаллоцируем таблицу
		} 
		catch (const std::bad_alloc& e) {
			std::cerr << "Ошибка выделения памяти: " << e.what() << std::endl;
			return;
		}
		catch (const std::exception& e) {
			std::cerr << "Исключение: " << e.what() << std::endl;
		}
		catch (...) {
			std::cerr << "Произошла неизвестная ошибка " << std::endl;
		}
	}

	void HandleExceptionAddBackBucket(T* lastBucket, bool allocLastBucket) {
		// Возвращаем параметры в исходное состояние
		if (allocLastBucket) {
			bucket_alloc_.deallocate(lastBucket, BUCKET_SIZE);
			--max_allocated_index_;
		}
			
		--end_bucket_;
	}

	void AddBackBucket(T newData) {
		T* lastBucket = *(map_ + end_bucket_);						// Указатель на последний бакет

		// Проверяем наличие места
		if (end_offset_ == BUCKET_SIZE) {							// Если бакет закончился

			if (end_bucket_ == mapSize_ - 1) {						// Если место в таблице закончилось
				MapRealocation();									// Выделяем ещё место в памяти для таблицы
			}

			++end_bucket_;											// Увеличиваем индекс последнего бакета
			lastBucket = *(map_ + end_bucket_);						// Указатель на новый последний бакет
			bool allocLastBucket = false;							// Для обработки исключения
			
			try {
				if (end_bucket_ > max_allocated_index_) {					// Проверяем память в бакете уже аллоцированна или ещё нет
					lastBucket = bucket_alloc_.allocate(BUCKET_SIZE);		// Выделяем место для нового бакета
					++max_allocated_index_;									// Увеличиваем индекс аллоцированной памяти до последнего бакета
					allocLastBucket = true;									// Для обработки исключения
				}

				map_alloc_.construct(map_ + end_bucket_, lastBucket);	// Сохраняем в таблице указатель на новый последний бакет
				end_offset_ = 0;										// Смещение последнего элемента в последнем бакете теперь равно 0
			}
			catch (const std::bad_alloc& e) {
				std::cerr << "Ошибка при выделении памяти под новый бакет в методе AddBackBucket: " << e.what() << std::endl;
				HandleExceptionAddBackBucket(lastBucket, allocLastBucket);
				throw;
			}
			catch (const std::exception& e) {
				std::cerr << "Ошибка при сохранении указателя на новый бакет в основной таблице: " << e.what() << std::endl;
				HandleExceptionAddBackBucket(lastBucket, allocLastBucket);
				throw;
			}
		}

		// Добавляем элемент в бакет
		try {
			bucket_alloc_.construct(lastBucket + end_offset_, newData);
			++end_offset_;
		}
		catch (const std::exception& e) {
			std::cerr << "Ошибка при добавляении элемента в бакет: " << e.what() << std::endl;
			throw;
		}
		
	}

	void HandleExceptionAddFrontBucket(T* firstBucket, bool allocFirstBucket) {
		// Возвращаем параметры в исходное состояние
		if (allocFirstBucket) {
			bucket_alloc_.deallocate(firstBucket, BUCKET_SIZE);
			++min_allocated_index_;
		}

		++begin_bucket_;
	}

	void AddFrontBucket(T newData) {
		T* firstBucket = *(map_ + begin_bucket_);					// Указатель на первый бакет
		// Проверяем наличие места
		if (begin_offset_ == 0) {									// Если сдвиг == 0, то бакет заполнен

			if (begin_bucket_ == 0) 								// Если место в таблице закончилось
				MapRealocation();									// Выделяем ещё место в памяти для таблицы

			--begin_bucket_;										// Уменьшаем индекс первого бакета
			firstBucket = *(map_ + begin_bucket_);					// Указатель на новый первый бакет
			bool allocFirstBucket = false;							// Для обработки исключения

			try {
				if (begin_bucket_ < min_allocated_index_) {					// Проверяем память в бакете уже аллоцированна или ещё нет
					firstBucket = bucket_alloc_.allocate(BUCKET_SIZE);		// Выделяем место для нового первого бакета
					--min_allocated_index_;									// Уменьшаем индекс аллоцированной памяти до первого бакета
				}

				map_alloc_.construct(map_ + begin_bucket_, firstBucket);// Сохраняем в таблице указатель на новый первый бакет
				begin_offset_ = BUCKET_SIZE;							// Смещение первого элемента в первом бакете теперь равно BUCKET_SIZE
			}
			catch (const std::bad_alloc& e) {
				std::cerr << "Ошибка при выделении памяти под новый бакет в методе AddFrontBucket: " << e.what() << std::endl;
				HandleExceptionAddFrontBucket(firstBucket, allocFirstBucket);
				throw;
			}
			catch (const std::exception& e) {
				std::cerr << "Ошибка при сохранении указателя на новый бакет в основной таблице: " << e.what() << std::endl;
				HandleExceptionAddFrontBucket(firstBucket, allocFirstBucket);
				throw;
			}
			
		}

		// Добавляем элемент в бакет
		try {
			--begin_offset_;
			bucket_alloc_.construct(firstBucket + begin_offset_, newData);
		}
		catch (const std::exception& e) {
			std::cerr << "Ошибка при добавляении элемента в бакет: " << e.what() << std::endl;
			++begin_offset_;
			throw;
		}
	}

public:
	using iterator = base_iterator<false>;		// Стандартный итератор
	using const_iterator = base_iterator<true>;	// Константный итератор

	deque() :
		map_(nullptr),
		mapSize_(0),
		begin_bucket_(0),
		begin_offset_(0),
		end_bucket_(0),
		end_offset_(0),
		min_allocated_index_(0),
		max_allocated_index_(0)
	{
	}

	deque(size_t num) :
		map_(nullptr),
		mapSize_(0),
		begin_bucket_(0),
		begin_offset_(0),
		end_bucket_(0),
		end_offset_(0),
		min_allocated_index_(0),
		max_allocated_index_(0)
	{
		// Выделяем память под элементы
		size_t newMapSize = num / BUCKET_SIZE * 2 + 1;
		MapRealocation(newMapSize);

		// Заполняем бакеты элементами
		T* lastBucket = map_[end_bucket_];						// Указатель на последний бакет
		for (size_t i = 0; i < num; ++i) {						// Проход по всем элементам
			// Проверяем наличие места
			if (end_offset_ == BUCKET_SIZE) {							// Если бакет закончился
				++end_bucket_;											// Увеличиваем индекс последнего бакета
				lastBucket = map_[end_bucket_];							// Указатель на новый последний бакет
				lastBucket = bucket_alloc_.allocate(BUCKET_SIZE);		// Выделяем место для нового бакета
				map_alloc_.construct(map_ + end_bucket_, lastBucket);	// Сохраняем в таблице указатель на новый последний бакет
				end_offset_ = 0;										// Смещение последнего элемента в последнем бакете теперь равно 0
			}
			// Добавляем элемент по умолчанию в бакет
			bucket_alloc_.construct(lastBucket + end_offset_, T());
			++end_offset_;
		}
		max_allocated_index_ = end_bucket_;						// Индекс аллоцированных бакетов
	}

	~deque() {
		if (mapSize_ == 0)
			return;

		T** ptr = map_;														// Указатель на таблицу

		// Деалоцировать промежуток памяти между min_allocated_index и begin_bucket_
		for (size_t i = min_allocated_index_; i < begin_bucket_; ++i)
			bucket_alloc_.deallocate(map_[i], BUCKET_SIZE);
		// Деалоцировать промежуток памяти между end_bucket_ и max_allocated_index_
		for (size_t i = end_bucket_; i < max_allocated_index_; ++i)
			bucket_alloc_.deallocate(map_[i], BUCKET_SIZE);

		for (size_t i = begin_bucket_; i < end_bucket_ + 1; ++i) {			// Перебор всех бакетов
			T* bucket = *(ptr + i);											// Указатель на текущий бакет

			// Подготавливаем индексы
			size_t firstElement = 0;										// Индекс первого элемента в бакете
			size_t lastElement = BUCKET_SIZE;								// Индекс второго элемента в бакете
			if (i == begin_bucket_)											// Первый бакет может начинаться не с 0
				firstElement = begin_offset_;								// Поэтому устанавливаем смещение на первый бакет
			if (i == end_bucket_)											// Последный бакет может заканчиваться не в самом конце
				lastElement = end_offset_;									// Поэтому устанавливаем смещение на последний бакет


			// Проход по очередному бакету
			for (size_t j = firstElement; j != lastElement; ++j) {			// Проходим по бакету
				bucket_alloc_.destroy(bucket + j);							// Удаляем элементы из бакета
			}

			bucket_alloc_.deallocate(bucket, BUCKET_SIZE);					// Очищаем память указателю бакет
		}

		map_alloc_.deallocate(map_, mapSize_);								// Очищаем всю таблицу из памяти
	}

	iterator begin() {
		if (mapSize_ == 0)								// Если deque пусто
			return end();								// то возвращаем итератор на end

		return iterator{ map_, begin_bucket_, begin_offset_ };
	}

	const_iterator begin() const {
		if (mapSize_ == 0)								// Если deque пусто
			return end();								// то возвращаем итератор на end

		return const_iterator{ map_, begin_bucket_, begin_offset_ };
	}

	iterator end() { return iterator{ map_, end_bucket_, end_offset_ }; }
	const_iterator end() const { return const_iterator{ map_, end_bucket_, end_offset_ }; }

	T& operator[](size_t index) {
		size_t bucketIndex = index / BUCKET_SIZE;					// Индекс бакета
		size_t itemIndex = index - bucketIndex * BUCKET_SIZE;		// Индекс элемента

		T* bucketPtr = map_[begin_bucket_ + bucketIndex];			// Указатель на бакет в котором хранится нужный элемент
		return bucketPtr[itemIndex];								// Возвращаем ссылку на нужный элемент
	}
	void push_back(T newData) {
		// TODO: возможно тоже стоит передавать новый размер в функцию как в векторе
		try {
			if (mapSize_ == 0) 
				MapRealocation();
			AddBackBucket(newData);
		}
		catch (const std::bad_alloc& e) {
			std::cerr << "Ошибка выделения памяти: " << e.what() << std::endl;
			return;
		}
		catch (const std::exception& e) {
			std::cerr << "Исключение: " << e.what() << std::endl;
		}
		catch (...) {
			std::cerr << "Произошла неизвестная ошибка " << std::endl;
		}
	}

	void push_front(T newData) {
		try {
			if (mapSize_ == 0)
				MapRealocation(3);
			AddFrontBucket(newData);
		}
		catch (const std::bad_alloc& e) {
			std::cerr << "Ошибка выделения памяти: " << e.what() << std::endl;
			return;
		}
		catch (const std::exception& e) {
			std::cerr << "Исключение: " << e.what() << std::endl;
		}
		catch (...) {
			std::cerr << "Произошла неизвестная ошибка " << std::endl;
		}
	}

	void pop_back() {
		if (begin_bucket_ == end_bucket_ && begin_offset_ == end_offset_)	// Если индексы бакетов совпадают					
			return;															// и если индексы смещений равны, то deque пустой

		// Уменьшаем смещение end_offset_, чтобы указать на последний элемент
		if (end_offset_ == 0) {
			--end_bucket_;													// Уменьшаем индекс последнего бакета
			end_offset_ = BUCKET_SIZE;										// Индекс смещения ставим на конец нового последнего бакета
		}

		--end_offset_;														// Уменьшаем индекс смещения

		// Уничтожаем элемент
		T* lastBucket = map_[end_bucket_];									// Указатель на последний бакет
		bucket_alloc_.destroy(lastBucket + end_offset_);					// Удаляем элемент из бакета

		// Если deque стал пустым, обновляем индексы
		if (begin_bucket_ == end_bucket_ && begin_offset_ == end_offset_) {
			// Сбрасываем индексы 
			//TODO: надо реализовать shrink_to_fit чтобы память не оставалась аллоцированной
			begin_bucket_ = end_bucket_ = mapSize_ / 2;						// На случай если опять будут добавлять элементы
			begin_offset_ = end_offset_ = 0;
		}

		// Проверяем в таблице кол-во аллоцированной, но неиспользуемой памяти 
		size_t numEmptyBucket = max_allocated_index_ - end_bucket_;			// Кол-во пустых бакетов от последнего элемента до конца таблицы
		Shrink_map(numEmptyBucket);
	}

	void pop_front() {
		if (begin_bucket_ == end_bucket_ && begin_offset_ == end_offset_)	// Если индексы бакетов совпадают					
			return;															// и если индексы смещений равны, то deque пустой

		// Уничтожаем элемент
		T* firstBucket = map_[begin_bucket_];								// Указатель на первый бакет
		bucket_alloc_.destroy(firstBucket + begin_offset_);					// Удаляем элемент из бакета

		++begin_offset_;													// Увеличиваем индекс смещения

		// Если смещение достигло конца текущего бакета, переходим к следующему
		if (begin_offset_ == BUCKET_SIZE) {
			++begin_bucket_;												// Переходим на следующий бакет
			begin_offset_ = 0;												// Сбрасываем смещение на начало нового бакета
		}

		// Если deque стал пустым, обновляем индексы
		if (begin_bucket_ == end_bucket_ && begin_offset_ == end_offset_) {
			// Сбрасываем индексы 
			//TODO: надо реализовать shrink_to_fit чтобы память не оставалась аллоцированной
			begin_bucket_ = end_bucket_ = mapSize_ / 2;						// На случай если опять будут добавлять элементы
			begin_offset_ = end_offset_ = 0;
		}

		// Проверяем в таблице кол-во аллоцированной, но неиспользуемой памяти 
		size_t numEmptyBucket = begin_bucket_ - min_allocated_index_;		// Кол-во пустых бакетов от начала таблицы до первого элемента
		Shrink_map(numEmptyBucket);
	}

	// Для отладки, когда дебагера нет под рукой
	void print(size_t indexMap, size_t indexBucket) {
		T* bucket = *(map_ + indexMap);
		T item = *(bucket + indexBucket);

		std::cout << "map: " << indexMap << ", bucket: " << indexBucket << std::endl;
		std::cout << "bucket: " << item << std::endl;
		std::cout << "begin_bucket_: " << begin_bucket_ << std::endl;
		std::cout << "begin_offset_: " << begin_offset_ << std::endl;
		std::cout << "end_bucket_: " << end_bucket_ << std::endl;
		std::cout << "end_offset_: " << end_offset_ << std::endl;
		std::cout << "mapSize_: " << mapSize_ << std::endl;
		std::cout << "----------------" << '\n' << std::endl;

	}
};


int main() {
	return 0;
}