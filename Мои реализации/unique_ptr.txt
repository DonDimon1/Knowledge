#include <iostream>

template <typename T, typename Deleter = std::default_delete<T>>
class unique_ptr {
	T* ptr;
	[[no_unique_address]] Deleter del;

public:
	unique_ptr(T* ptr): ptr(ptr) {}
	unique_ptr(T* ptr, Deleter del) : ptr(ptr), del(del) {}
	
	unique_ptr(const unique_ptr&) = delete;
	unique_ptr& operator=(const unique_ptr&) = delete;

	unique_ptr(unique_ptr&& other) noexcept: 
			ptr(std::move_if_noexcept(other.ptr)), 
			del(std::move_if_noexcept(other.del)) {
		other.ptr = nullptr;
	}

	unique_ptr& operator=(unique_ptr&& other) noexcept {
		if (this != &other) {
			del(ptr);
			ptr = std::move_if_noexcept(other.ptr);
			del = std::move_if_noexcept(other.del);
			other.ptr = nullptr;
		}
		return *this;
	}

	bool operator==(const unique_ptr& other) const {
		if (ptr == other.ptr)
			return true;
		return false;
	}
	
	~unique_ptr() {                                                            
		del(ptr);
	}

	T& operator*() const {
		return *ptr;
	}
	T* operator->() const {
		return ptr;
	}
	T* get() {
		return ptr;
	}
};

template <typename T, typename... Args>
unique_ptr<T> make_unique(Args... args) {
	return unique_ptr<T>(new T(std::forward<Args>(args)...));
}


int main() {
	int* p = new int(11);
	int* p2 = new int(93);
	unique_ptr<int> up(p);
	unique_ptr<int> up2(p2);
	unique_ptr<int> up3(std::move(up));
	up2 = std::move(up3);
	auto* p3 = up2.get();
	*p3 = 456;

	unique_ptr<int> p4 = make_unique<int>(5);
}