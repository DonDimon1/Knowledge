#include <iostream>

template <typename T>
struct allocator {
	T* allocate(size_t count) {
		void* temp = operator new(count * sizeof(T));
		return static_cast<T*>(temp);
	}
	void deallocate(T* ptr, size_t count) {
		operator delete(ptr);					
	}

	template <typename U, typename... Args>
	void construct(U* ptr, Args&&... args) {		// По поводу Args&& см. семантику перемещений		
		new (ptr) U(args...);				
	}							

	template <typename U>					
	void destroy(U* ptr) {
		ptr->~U();
	}

	allocator() = default;

	template<typename U>					
	allocator(allocator<U>) {}				

	template <typename U>					
	struct rebind {						
		using other = allocator<U>;
	};
};

int main() {
	allocator<int> alloc;

	int* p = alloc.allocate(1);

	alloc.construct(p, 42);
	std::cout << "Allocated value: " << *p << std::endl;

	alloc.destroy(p);
	alloc.deallocate(p, 1);
}