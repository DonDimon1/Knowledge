https://metanit.com/cpp/qt/6.1.php
Сигнал — это сообщение, которое передается, чтобы сообщить об изменении состояния объекта. Сигнал может нести информацию о произошедшем изменении.

Слот — это специальная функция, вызываемая в ответ на определенный сигнал. Поскольку слоты — это функции, они содержат логику для выполнения определенного действия.

Все классы, наследуемые от QObject или одного из его подклассов (например, QWidget), могут содержать сигналы и слоты. Для определения сигнала в классе применяется специальная 
секция signals:

class MyClass : public QObject
{
    Q_OBJECT
public: 
    MyClass(){}
signals:
    void signalName();  // определяем сигнал
public slots:
    void slotName(){ некоторый код }  // определяем слот
};


При этом для одного сигнала можно подключить множество слотов. Аналогично один слот может обрабатывать несколько сигналов. Можно даже подключить сигнал напрямую к другому 
сигналу. (При этом второй сигнал будет генерироваться сразу же, как только будет излучен первый.) Если к одному сигналу подключено несколько слотов, то функции-слоты будут 
выполняться в порядке подключения к сигналу.

Чтобы сгенерировать сигнал, применяется специальный макрос emit:

emit signalName();




Чтобы подключить сигнал к слоту, можно использовать функцию QObject::connect(), которая имеет ряд версий. Возьмем наиболее распространенную:

QMetaObject::Connection QObject::connect( 
    const QObject *senderObject, const char *signalName, 
    const QObject *receiverObject, const char *slotName, 
    Qt::ConnectionType type = Qt::AutoConnection)

senderObject: объект отправителя сигнала
signalName: название отправленного сигнала
receiverObject: объект-получатель сигнала
slotName: метод слота, который обрабатывает сигнал


type: тип устанавливаемого соединения. Он определяет, будет ли уведомление доставлено в слот немедленно или поставлено в очередь на потом. В Qt можно создать шесть различных 
типов соединений:

1) Qt::AutoConnection: тип соединения по умолчанию, определяется автоматически при генерации сигнала. Если и отправитель, и получатель находятся в одном потоке, то 
используется Qt::DirectConnection, иначе применяется Qt::QueuedConnection.

2) Qt::DirectConnection: в этом случае и сигнал, и слот находятся в одном потоке. Слот вызывается сразу после генерации сигнала.

3) Qt::QueuedConnection: в этом случае слот находится в разных потоках. Слот вызывается, как только управление возвращается в цикл обработки событий потока получателя.

4) Qt::BlockingQueuedConnection: аналогичен Qt::QueuedConnection за тем исключением, что поток сигнала блокируется до тех пор, пока слот не будет выполнен. Это 
соединение нельзя использовать, если отправитель и получатель находятся в одном потоке, чтобы избежать взаимоблокировки.

5) Qt::UniqueConnection: его можно комбинировать с любым из вышеупомянутых типов соединения, используя побитовую операцию ИЛИ. Применяется, чтобы избежать дублирования 
соединений. Соединение завершится неудачно, если оно уже существует.

6) Qt::SingleShotConnection: одноразовая обработка сигнала. В этом случае слот вызывается только один раз, и соединение разрывается после генерации сигнала. Данный тип можно 
использовать с другими типами соединений. Этот тип соединения был добавлен в Qt 6.0.


Существует несколько способов соединения сигналов и слотов. Наиболее часто используемый синтаксис выглядит следующим образом:
QObject::connect(this, SIGNAL(signalName()), this, SLOT(slotName()));

Для разрыва соединения между сигналом и слотом применяется функция disconnect(). Она также имеет несколько различных версий. В простейшей форме она принимает соединение, 
которое надо разорвать:

bool QObject::disconnect(const QMetaObject::Connection &connection)









































