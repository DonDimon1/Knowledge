Все модули, которые нам предоставляет фреймворк Qt, можно поделить на 6 основных категорий:

1) Основные модули
- QtCore - это ядро фреймворка, там находятся все фундаментальные классы. Оно включает: строки, контейнеры, работа с датой и временем, файловой системой, многопоточность, события и т.д.
- QtGui - это базовая графика, отрисовка, шрифты, рисование, изображения, цвета.
- QtWidgets - классические UI-элементы. Во фреймворке Qt у нас имеются две независимые системы того, как мы можем разрабатывать графический интерфейс нашего приложения. Либо используя классические виджеты (как телеграм десктоп), либо
использовать "Интерфейсы нового поколения", т.е. использовать язык QML, который является смесью JavaScript, JSON и CSS.

2) Интерфейсы нового поколения
Тут собраны все модули, которые занимаются поддержкой языка QML, и для взаимодействия с C++.
- QtQuick - декларативный UI на QML.
- QtQml - исполнение QML + JavaScript.
- QtQuickControls2 - готовые элементы управления.
- QtQuick3D - 3D ui и сцены на QML.
- QtMultimedia - звук, видео, камера.

3) Сетевые и Web модули
Если наше приложение взаимодействует по сети
- QtNetwork - TCP/UDP, HTTP, FTP
- QtWebSockets - протокол WebSocket-соединения
- QtWebEngine - встроенный браузер Chromium
- QtHttpServer - легковестный встроенный HTTP-сервер

4) Модули логики и данных
Если наше приложение взаимодействет с базой данных например, или Xml или JSON
- QtSql - базы данных: SQLite, MySQL, и все остальные известные базы данных.
- QtConcurrent - многопоточные алгоритмы
- QtXml - чтение и запись XML
- QtJson - чтение и запись JSON
- QtStateMachine - конечные автоматы
- QtRemoteObjects - удалённые объекты

5) Платформенные и системные модули
- QtBluetoth - Bluetooth API
- QtSensors - гироскоп, акселерометр
- QtSerialPort - работа с COM-портами
- QtLocation - карты, навигация
- QtPositioning - GPS и координаты
- QtNfc - поддержка NFC
- Qt3D - 3D-графика и сцены. Это полнофункциональный 3D движок.

6) Вспомогательные модули
- QtTest - модульное тестирование
- QtHelp - встроенная справка
- QtCharts - 2D-графика
- QtDataVisualization - 3D-графика 
- QtLottie - анимации JSON из After Effects



######################
Рассмотрим подробно ядро фрейморка - QtCore

Строки и текст:
QString - класс строки с поддержкой Unicode
QByteArray - класс байтов, аналог std::vector<char>
QLatinlString - легковесная строка в кодировке Latinl

Контейнеры:
QList - список, аналог std::vector (да именно std::vector, а не std::list)
QVector - динамический массив (тоже аналог std::vector)
QMap - ассоциативный контейнер (ключ-значение)
QHash - хеш-таблица
QSet - множество

Время и даты:
QDate - дата
QTime - время
QDateTime - дата и время
QTimer - таймеры
QElapsedTimer - таймер с высоким разрешением

Файлы и ввод/вывод
QFile - работа с файлом
QDir - работа с директориями
QTextStream - работа с текстовыми потоками
QIODevice - базовый интерфейс ввода-вывода
QTemporaryFile - временные файлы

Многопоточность:
QThread - потоки
QMutex - мьютексы
QSemaphore - семафоры
QFuture - результаты асинхронных вычислений
QThreadPool - пул потоков

Списки и события:
QObject - базовый класс с сигналами и слотами
QEvent - объекты событий
QCoreApplication - основа Qt-приложения
QSignalMapper - сигналы на разные слоты

Умные указатели (я не дописал)


После просмотра на данные модули можен возникнуть вопрос: почему здесь столько много дублирований стандартной библиотеки STL, например контейнеры? Ведь всё тоже самое есть в стандартной библиотеке? Причина истроическая, поскольку
первый релиз фреймворка Qt вышел в 1995 году, а первый стандарт языка C++ только в 1998, поэтому получается так, что Qt разрабатывался параллельно с STL, и в какие-то года он даже опережал её, однако сейчас обратная ситуация, STL
обогнала Qt, и Qt принял грамотное решение, он как бы совмещается со стандартной библиотекой, а не соперничает с ней.













