Репозитория это папка с фалами за которой следит git. Он мб локальным или удалённым (например GitHub).

При выделения текста в GitBash текст автоматически копируется

Версия GIT: git --version

параметр --global указывает на то что настройки будут применены вообще клюбому файлу

Указываем почту: git config --global user.email "you@example.com"
Указываем имя: git config --global user.name "Your Name"
Для смены имени и емайла используем эти же команды
Для просмотра уже введённого имени или емейла ввести теже команды просто без кавычек
параметр --global указывает на то что настройки будут применены вообще клюбому файл 



Переход в директория(Windows): cd C:/Users/winge/Documents/GIT_repository
Создание репозитория в папке нахождения: git init
Добавить все файлы (в данной директории и всех поддиректориях) к комиту: git add .
Статус комита: git status
Создать комит: git commit
Создать комит с коментарием через консоль: git commit -m "Коментарий"
Проверка выполнения комита: git log

Откат комита: Выполняем команду git status, выбираем комит который нам нужен, копируем его хэш
Выполняем команду: git checkout хэш_коммита


Как СОЗДАТЬ УДАЛЁННЫЙ репозиторий:
Идём на GitHub, создаём пустой репозиторий. Далее в локальном репозитории Git выполняем команду:
git remote add origin url_удалнного_репозитория
Обновления кода в облако происходит явно после ввода команды (автообновлений нет).

Для того чтобы СОЗДАТЬ ЛОКАЛЬНЫЙ репозиторий который полностью КОПИРУЕТ облачный репозиторий сначала переходим в консоли в папку куда мы хотим скачать эту копию.
Далее выполняем: git clone url_удалнного_репозитория
Эта копия сразу является локальным репозиторием и он автоматически связан с удалённым (прописывать команды не нужно).

Для того чтобы ЗАГРУЗИТЬ сделанные коммиты в удалённый репозиторий нужно находясь в терминале локального репозитория выполнить команду:
git push имя_репозитория(origin) имя_ветки_изменения(master)
git push origin master

Для того чтобы ПОДТЯНУТЬ из удалённого репозитория новые коммиты в локальный: Из деректории локального репозитория выполнить команду:
git pull имя_удалённого_репозитория(origin) имя_ветки_изменения(master)

______________________________________________________________________________________
Ветка в GIT это последовательность коммитов которая имеет определённое имя. Самая главная ветка называется Master или Main. Когда мы создаём новую ветку в git,
мы работаем с изолированными коммитами чтобы не испортить стабильную версию.
Список всех веток в лок. репозитории: git branch 
Звёздочкой отмечена ветка на которой мы сейчас находимся

Создания новой ветки: git branch имя_новой_ветки
Когда мы создаём новую ветку то она по умолчания создаётся на основе последнего коммита той ветки, на которой мы находились в момент создания.

Переключиться на новую ветку: git checkout имя_ветки
Теперь все новые коммиты будут сохраняться только в новой ветке. 

Чтобы опубликовать новую ветку на удалённом репозитории нужно выполнить команду, находясь в локальной ветке, которую хотим опубликовать:
git push имя_новой_удалённой_ветки


#################
Слияние веток
Чтобы перевести все изменения из изолированной ветки(feature) в ветку master существуют 2 механизма:
1)Merge
У нас две ветки: 
*feature
 master
Сначала делаем checkout на ту ветку, в которую мы будем делать merge:
git checkout master
Затем выполняем команду: git merge имя_ветки_из_которой_мы_будем_проводить_слияние
git merge feature
В этот момент Git берёт все изменения из ветки feature и добавляет все их в ветку master в виде всего одного нового коммита. Всё это происходит в локальном 
	репозитории.

2)Если мы хотим перевести вообще все коммиты из feature в master используем команду: 
git rebase feature
Перемещаем коммиты из данной ветки в ту, на которой сейчас находится пользователь


______________________________________________________________________________________
Организация веток

Ветка master (main) главная ветка,  в которой содержиться стабильная версия продукта. В неё мёрджутся все остальные ветки проекта. 
Под каждую новую фичу как правило создаётся новая ветка из последней версии master ветки:

feature	ветка          /-> (2.1) --> (2.2) --> (2.3)\
	              /				     \
master ветка (1) --> (2) ---------------------------->(3)\

Если новая фича достаточно объёмная по кол-ву изменений то из ветки фичи также можно создавать доп. подветки для работы с отдельными компонентами, чтобы распараллелить
работу над ней между несколькими разрабами:

				       (Серёга 1) --> (Серёга 2)
				       |
				       |  / (Ванёк 1) --> (Ванёк 2)
				       | /
				       |/
feature	ветка          /-> (2.1) --> (2.2) --> (2.3)\
	              /				     \
master ветка (1) --> (2) ---------------------------->(3)\

Затем такие подветки каждый из разрабов мёржит обратно в feature ветку, когда он завершил работу над каким то небольшим компонентом:


				       (Серёга 1) --> (Серёга 2) --> (Серёга 3)
				       |				   |
				       |  / (Ванёк 1) --> (Ванёк 2)	   |
				       | /		     |		   |
				       |/		     |		   |
feature	ветка          /-> (2.1) --> (2.2) --> (2.3)\-----> (2.4) ------> (2.5)\
	              /				     \				\
master ветка (1) --> (2) ---------------------------->(3) --------------------> (4)


Фичу можно разрабатывать очень долго (месяцы), и разумеется всё это время вы разрабатываете её в feature ветке, которая отдельна от master ветки. Но в команде могут быть
ещё разрабы которые тоже пилят свои фичи в отдельных ветках, а потом вливают её в master ветку. И поэтому полезно до мержа нашей фичи, в основную кодовую базу, протестить
все наши изменения вместе с теми изменениями которые другие разрабы успели сделать до нашего мержа. Но проблема в том что мы свою ветку можем создать гораздо раньше, чем 
другой разраб сделал свою фичу и смёржил её потом в мастер. Т.е. ваша ветка может быть уже не актуальной. В этом случае можно в нашу feature ветку подмёржить новые 
изменения из master веткии протестить нашу фичу со всеми свежими изменениями из master.

наша feature ветка		  /(2.1) --> (2.2) ---->/(2.3)\
				 /		       /       \
master ветка 		(1) --> (2) ----------------> (3)  --> (4)
			 \			     /
чужая feature ветка	  \(1.1) --> (1.2) --> (1.3)/

Такой подход к организации веток называется GIT FLOW. https://habr.com/ru/articles/106912/


______________________________________________________________________________________
Pull Request (Merge Request)

Это запрос на слияние изменений из вашей feature-ветки в любую другую ветку. Нужен для того, чтобы кринжовый код не мёржился в master. Т.е. мёржить в другую ветку 
разрешено только после одобрения и проверки вашего кода тимлидом например или другими участниками вашей команды. 
Заливаем комиты в GitHub и создаём там Pull Request, люди коментят код, ты его исправляешь, делаешь пуш этой ветки и Pull Request автоматически обновляется новыми 
коммитами. Когда люди заопрувят(разрешат) мёржить, можно будет замёржить.


______________________________________________________________________________________
Cherry-pick

У нас есть две ветки. Мы работаем в нашей ветки фичи и вдруг понимаем, что какой то один единственный коммит из тех что мы сделали в этой ветке раньше, было бы здорово
просто взять и применить к какой то другой отдельной ветке. Если в этой ситуации просто сделать мёрдж или ребейс, то все изменения из первой ветки полностью попадут во 
вторую ветку в виде отдельного коммита, а нам нужно только одно изменение. Эту проблему решает Cherry-pick. Зная хэш коммита, который нужно перенести, взять этот коммит
и перетащить в любую другую ветку нашего проекта, в самый её конец.


наша feature ветка		  /(2.1) --> (2.2) --> (2.3 Мы сейчас тут) 
				 /		       
master ветка 		(1) --> (2) 

Когда сделаем чери пик будет:

наша feature ветка		  /(2.1) --> (2.2) --> (2.3 Мы сейчас тут) 
				 /		|       
master ветка 		(1) --> (2) ---------> (3)


Для этого нам нужно переключиться на ветку в которую нам нужно перенести коммит. Далее пишем комманду:
git cherry-pick хэш_коммита

хэш коммита очень длинный поэтому мы можем скопировать только первые 7 символов и git поймёт какой коммит Вам нужен.


______________________________________________________________________________________
Конфликты в git

Представим что у нас есть один файл над котором одновременно работают 2 разраба каждый в своём локальном репозитории и своей локальной ветке. 1ый разраб в своём локальном 
репозитории в своей ветке меняет в этом файле строчку под номером 4 на какую то другую и коммитет потом эти изменения, пушит в удалённые репозиторий и мёржит в 
мастер. В этот же самый момент 2ой разраб в своём локальном репозитории в своей ветке меняете ту же самую строчку под номером 4 в том же самом файле, но делает это иначе,
не так как 1ый разраб. Он вспоминает что давно в свою feature ветку не подливал свежий мастер и решает это сделать, чтобы подтянуть все свежие изменения и протестить свою
фичу. А там уже закомичен код 1ого разраба, который менял тот же самый файл что и 2ой разраб. В результате, когда 2ой разраб делает мёрж ветки мастер в свою фичу ветку, 
у него возникает конфликт изменений именно в этой строчки под номером 4. Git не может решить какая из версий файла правильная, поэтому сигнализирует о конфликте. Этот 
сигнал и называется конфликтом слияния веток.

При конфликте git пишет в консоль о конфликте в файле и что автоматический мёрж поломался. Если открыть этот файл то мы увидим в месте конфликта сигналы о конфликте.
Под первыми стрелочками до знаков = находиться версия этой строчки и вашей текущей ветки feature, а после знаков = до стрелочек находиться версия той же самой строчки,
которая прилетела из master ветки.
Мы решаем проблему и коммитем изменение чтобы мёрж наконец то завершился. Коммит нужно делать потому, что результат мержа это всегда новый коммит. Сам git его сделать 
изначально не смог из-за конфликта, поэтому теперь, когда мы всё порешали, то должны сами закомитеть.

#################

IDE от JetBrains позволяет решать конфликты удобнее.

______________________________________________________________________________________
Revert vs Reset

git revert: Представим что мы работаем над файлом и постепенно делаем коммиты. Вдруг понимаем, что что написали в последнем коммите полную ерунду. И чтобы не возвращать 
файл в исходное состояние руками, мы можем воспользоваться этой командой. Находим хэш коммита который мы хотим отменить и далее пишем команду:
git revert хэш_коммита_который_нужно_отменить
Отмена какого либо коммита это пофакту новый коммит, с откатом всех изменений. Т.е. revert это отмена всех ваших предыдущих изменений конкретного комммита в виде нового
коммита.

git reset: Это команда, которая полностью противоположна команде git commit. Т.е. по сути git reset расскоммичивает ваши изменения. Т.е. она удаляет полностью коммиты.
Если мы хотим полностью удалить какие то из наших последних коммитов, то указываем эту команду и затем указываем хэш коммита, до которого мы хотим другие коммиты удалить.

Так же в этой команде есть параметр, состоящий из двух типов ресета.

параметр --soft: При этом параметре все коммиты будут удалены, однако изменения этих коммитов в файле не будут удалены (файл останеться таким же, каким и был до удаления
коммитов) и git продолжает за изменениями следить, поместив их в индекс гита. Если вызвать команду git status то мы увидем незакоммиченные изменения. Это как раз те 
изменения которые мы вынули обратно из коммитов и поместили их в индекс. Т.е. это процесс, обратный коммиту. При мягком ресете изменения файлов не теряются, а остаются
в индексе.

параметр --hard: Это полное удаление коммитов и изменений в них. Файл откатывается до состояния последнего оставшегося коммита.

git reset параметр_тип_ресета хэш_коммита_до_которого_удалятся_все_коммиты
Например: git reset --soft ad68f146d



